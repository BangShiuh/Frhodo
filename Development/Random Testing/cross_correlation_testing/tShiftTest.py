import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import interp1d
from scipy.signal import correlate, fftconvolve, wiener, hilbert
from scipy.ndimage import median_filter
from timeit import default_timer as timer

def calc_t_interp(t_sim, t_exp):
    t_bounds = [np.max([t_sim[0], t_exp[0]])]       # Largest initial time in SIM and Exp
    t_bounds.append(np.min([t_sim[-1], t_exp[-1]])) # Smallest final time in SIM and Exp
    # Creates interpolated time vector
    exp_bounds = np.where(np.logical_and((t_exp >= t_bounds[0]),(t_exp <= t_bounds[1])))
    t_interp = t_exp[exp_bounds]
    
    return t_interp, exp_bounds

def parabolic(f, x):
    """Quadratic interpolation for estimating the true position of an
    inter-sample maximum when nearby samples are known.
    f is a vector and x is an index for that vector.
    Returns (vx, vy), the coordinates of the vertex of a parabola that goes
    through point x and its two neighbors.
    Example:
    Defining a vector f with a local maximum at index 3 (= 6), find local
    maximum if points 2, 3, and 4 actually defined a parabola.
    In [3]: f = [2, 3, 1, 6, 4, 2, 3, 1]
    In [4]: parabolic(f, argmax(f))
    Out[4]: (3.2142857142857144, 6.1607142857142856)
    """
    xv = 1/2. * (f[x-1] - f[x+1]) / (f[x-1] - 2 * f[x] + f[x+1]) + x
    yv = f[x] - 1/4. * (f[x-1] - f[x+1]) * (xv - x)
    return (xv, yv)    

t_offset = 0.0
t_exp = [0.030146, 0.050146, 0.070146, 0.090146, 0.110146, 0.130146, 0.150146, 0.170146, 0.190146, 0.210146, 0.230146, 0.250146, 0.270146, 0.290146, 0.310146, 0.330146, 0.350146, 0.370146, 0.390146, 0.410146, 0.430146, 0.450146, 0.470146, 0.490146, 0.510146, 0.530146, 0.550146, 0.570146, 0.590146, 0.610146, 0.630146, 0.650146, 0.670146, 0.690146, 0.710146, 0.730146, 0.750146, 0.770146, 0.790146, 0.810146, 0.830146, 0.850146, 0.870146, 0.890146, 0.910146, 0.930146, 0.950146, 0.970146, 0.990146, 1.010146, 1.030146, 1.050146, 1.070146, 1.090146, 1.110146, 1.130146, 1.150146, 1.170146, 1.190146, 1.210146, 1.230146, 1.250146, 1.270146, 1.290146, 1.310146, 1.330146, 1.350146, 1.370146, 1.390146, 1.410146, 1.430146, 1.450146, 1.470146, 1.490146, 1.510146, 1.530146, 1.550146, 1.570146, 1.590146, 1.610146, 1.630146, 1.650146, 1.670146, 1.690146, 1.710146, 1.730146, 1.750146, 1.770146, 1.790146, 1.810146, 1.830146, 1.850146, 1.870146, 1.890146, 1.910146, 1.930146, 1.950146, 1.970146, 1.990146, 2.010146, 2.030146, 2.050146, 2.070146, 2.090146, 2.110146, 2.130146, 2.150146, 2.170146, 2.190146, 2.210146, 2.230146, 2.250146, 2.270146, 2.290146, 2.310146, 2.330146, 2.350146, 2.370146, 2.390146, 2.410146, 2.430146, 2.450146, 2.470146, 2.490146, 2.510146, 2.530146, 2.550146, 2.570146, 2.590146, 2.610146, 2.630146, 2.650146, 2.670146, 2.690146, 2.710146, 2.730146, 2.750146, 2.770146, 2.790146, 2.810146, 2.830146, 2.850146, 2.870146, 2.890146, 2.910146, 2.930146, 2.950146, 2.970146, 2.990146, 3.010146, 3.030146, 3.050146, 3.070146, 3.090146, 3.110146, 3.130146, 3.150146, 3.170146, 3.190146, 3.210146, 3.230146, 3.250146, 3.270146, 3.290146, 3.310146, 3.330146, 3.350146, 3.370146, 3.390146, 3.410146, 3.430146, 3.450146, 3.470146, 3.490146, 3.510146, 3.530146, 3.550146, 3.570146, 3.590146, 3.610146, 3.630146, 3.650146, 3.670146, 3.690146, 3.710146, 3.730146, 3.750146, 3.770146, 3.790146, 3.810146, 3.830146, 3.850146, 3.870146, 3.890146, 3.910146, 3.930146, 3.950146, 3.970146, 3.990146, 4.010146, 4.030146, 4.050146, 4.070146, 4.090146, 4.110146, 4.130146, 4.150146, 4.170146, 4.190146, 4.210146, 4.230146, 4.250146, 4.270146, 4.290146, 4.310146, 4.330146, 4.350146, 4.370146, 4.390146, 4.410146, 4.430146, 4.450146, 4.470146, 4.490146, 4.510146, 4.530146, 4.550146, 4.570146, 4.590146, 4.610146, 4.630146, 4.650146, 4.670146, 4.690146, 4.710146, 4.730146, 4.750146, 4.770146, 4.790146, 4.810146, 4.830146, 4.850146, 4.870146, 4.890146, 4.910146, 4.930146, 4.950146, 4.970146, 4.990146, 5.010146, 5.030146, 5.050146, 5.070146, 5.090146, 5.110146, 5.130146, 5.150146, 5.170146, 5.190146, 5.210146, 5.230146, 5.250146, 5.270146, 5.290146, 5.310146, 5.330146, 5.350146, 5.370146, 5.390146, 5.410146, 5.430146, 5.450146, 5.470146, 5.490146, 5.510146, 5.530146, 5.550146, 5.570146, 5.590146, 5.610146, 5.630146, 5.650146, 5.670146, 5.690146, 5.710146, 5.730146, 5.750146, 5.770146, 5.790146, 5.810146, 5.830146, 5.850146, 5.870146, 5.890146, 5.910146, 5.930146, 5.950146, 5.970146, 5.990146, 6.010146, 6.030146, 6.050146, 6.070146, 6.090146, 6.110146, 6.130146, 6.150146, 6.170146, 6.190146, 6.210146, 6.230146, 6.250146, 6.270146, 6.290146, 6.310146, 6.330146, 6.350146, 6.370146, 6.390146, 6.410146, 6.430146, 6.450146, 6.470146, 6.490146, 6.510146, 6.530146, 6.550146, 6.570146, 6.590146, 6.610146, 6.630146, 6.650146, 6.670146, 6.690146, 6.710146, 6.730146, 6.750146, 6.770146, 6.790146, 6.810146, 6.830146, 6.850146, 6.870146, 6.890146, 6.910146, 6.930146, 6.950146, 6.970146, 6.990146, 7.010146, 7.030146, 7.050146, 7.070146, 7.090146, 7.110146, 7.130146, 7.150146, 7.170146, 7.190146, 7.210146, 7.230146, 7.250146, 7.270146, 7.290146, 7.310146, 7.330146, 7.350146, 7.370146, 7.390146, 7.410146, 7.430146, 7.450146, 7.470146, 7.490146, 7.510146, 7.530146, 7.550146, 7.570146, 7.590146, 7.610146, 7.630146, 7.650146, 7.670146, 7.690146, 7.710146, 7.730146, 7.750146, 7.770146, 7.790146, 7.810146, 7.830146, 7.850146, 7.870146, 7.890146, 7.910146, 7.930146, 7.950146, 7.970146, 7.990146, 8.010146, 8.030146, 8.050146, 8.070146, 8.090146, 8.110146, 8.130146, 8.150146, 8.170146, 8.190146, 8.210146, 8.230146, 8.250146, 8.270146, 8.290146, 8.310146, 8.330146, 8.350146, 8.370146, 8.390146, 8.410146, 8.430146, 8.450146, 8.470146, 8.490146, 8.510146, 8.530146, 8.550146, 8.570146, 8.590146, 8.610146, 8.630146, 8.650146, 8.670146, 8.690146, 8.710146, 8.730146, 8.750146, 8.770146, 8.790146, 8.810146, 8.830146, 8.850146, 8.870146, 8.890146, 8.910146, 8.930146, 8.950146, 8.970146, 8.990146, 9.010146, 9.030146, 9.050146, 9.070146, 9.090146, 9.110146, 9.130146, 9.150146, 9.170146, 9.190146, 9.210146, 9.230146, 9.250146, 9.270146, 9.290146, 9.310146, 9.330146, 9.350146, 9.370146, 9.390146, 9.410146, 9.430146, 9.450146, 9.470146, 9.490146, 9.510146, 9.530146, 9.550146, 9.570146, 9.590146, 9.610146, 9.630146, 9.650146, 9.670146, 9.690146, 9.710146, 9.730146, 9.750146, 9.770146, 9.790146, 9.810146, 9.830146, 9.850146, 9.870146, 9.890146, 9.910146, 9.930146, 9.950146, 9.970146, 9.990146, 10.01015, 10.03015, 10.05015, 10.07015, 10.09015, 10.11015, 10.13015, 10.15015, 10.17015, 10.19015, 10.21015, 10.23015, 10.25015, 10.27015, 10.29015, 10.31015, 10.33015, 10.35015, 10.37015, 10.39015, 10.41015, 10.43015, 10.45015, 10.47015, 10.49015, 10.51015, 10.53015, 10.55015, 10.57015, 10.59015, 10.61015, 10.63015, 10.65015, 10.67015, 10.69015, 10.71015, 10.73015, 10.75015, 10.77015, 10.79015, 10.81015, 10.83015, 10.85015, 10.87015, 10.89015, 10.91015, 10.93015, 10.95015, 10.97015, 10.99015, 11.01015, 11.03015, 11.05015, 11.07015, 11.09015, 11.11015, 11.13015, 11.15015, 11.17015, 11.19015, 11.21015, 11.23015, 11.25015, 11.27015, 11.29015, 11.31015, 11.33015, 11.35015, 11.37015, 11.39015, 11.41015, 11.43015, 11.45015, 11.47015, 11.49015, 11.51015, 11.53015, 11.55015, 11.57015, 11.59015, 11.61015, 11.63015, 11.65015, 11.67015, 11.69015, 11.71015, 11.73015, 11.75015, 11.77015, 11.79015, 11.81015, 11.83015, 11.85015, 11.87015, 11.89015, 11.91015, 11.93015, 11.95015, 11.97015, 11.99015, 12.01015]
drhodx_exp = [0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000572381, 0.000555832, 0.000523595, 0.00048842, 0.000452028, 0.000413343, 0.000374801, 0.000333681, 0.000294351, 0.000257816, 0.000224217, 0.000191478, 0.000164256, 0.000142979, 0.000124066, 0.000106658, 9.30E-05, 7.95E-05, 6.95E-05, 6.20E-05, 5.66E-05, 5.41E-05, 5.02E-05, 4.67E-05, 4.37E-05, 4.18E-05, 3.94E-05, 3.86E-05, 3.85E-05, 3.83E-05, 3.90E-05, 3.79E-05, 3.96E-05, 3.86E-05, 3.52E-05, 3.47E-05, 3.37E-05, 3.48E-05, 3.41E-05, 3.33E-05, 3.20E-05, 3.04E-05, 3.20E-05, 3.25E-05, 2.96E-05, 2.84E-05, 2.83E-05, 2.81E-05, 3.03E-05, 3.29E-05, 3.29E-05, 3.12E-05, 3.01E-05, 2.44E-05, 2.41E-05, 2.38E-05, 2.30E-05, 2.38E-05, 2.49E-05, 2.43E-05, 2.46E-05, 2.55E-05, 2.66E-05, 2.74E-05, 2.54E-05, 2.52E-05, 2.31E-05, 2.26E-05, 2.12E-05, 1.86E-05, 1.95E-05, 1.89E-05, 1.87E-05, 2.11E-05, 2.31E-05, 2.41E-05, 2.21E-05, 2.17E-05, 2.11E-05, 2.18E-05, 2.14E-05, 1.78E-05, 1.65E-05, 1.60E-05, 1.78E-05, 1.78E-05, 1.64E-05, 1.73E-05, 1.74E-05, 1.73E-05, 1.72E-05, 1.68E-05, 1.58E-05, 1.50E-05, 1.25E-05, 1.33E-05, 1.45E-05, 1.34E-05, 1.24E-05, 1.27E-05, 1.49E-05, 1.27E-05, 8.58E-06, 9.52E-06, 1.09E-05, 1.29E-05, 1.55E-05, 1.55E-05, 1.50E-05, 1.32E-05, 1.01E-05, 1.27E-05, 1.32E-05, 1.32E-05, 1.24E-05, 1.33E-05, 1.27E-05, 1.00E-05, 1.22E-05, 1.37E-05, 1.25E-05, 1.04E-05, 9.37E-06, 8.87E-06, 1.07E-05, 9.23E-06, 9.52E-06, 1.08E-05, 1.04E-05, 1.02E-05, 1.06E-05, 8.58E-06, 8.94E-06, 7.22E-06, 5.36E-06, 6.58E-06, 8.66E-06, 8.01E-06, 8.30E-06, 7.58E-06, 6.94E-06, 6.29E-06, 7.80E-06, 1.05E-05, 1.09E-05, 8.80E-06, 7.08E-06, 8.51E-06, 9.80E-06, 9.95E-06, 9.95E-06, 9.37E-06, 7.30E-06, 7.30E-06, 6.36E-06, 6.65E-06, 4.50E-06, 6.22E-06, 7.30E-06, 7.30E-06, 8.87E-06, 9.52E-06, 9.44E-06, 9.01E-06, 7.44E-06, 5.79E-06, 5.29E-06, 5.86E-06, 7.87E-06, 8.87E-06, 8.58E-06, 8.30E-06, 7.08E-06, 5.72E-06, 4.50E-06, 3.86E-06, 5.07E-06, 3.71E-06, 5.29E-06, 6.01E-06, 6.58E-06, 5.58E-06, 5.22E-06, 4.21E-06, 6.36E-06, 7.51E-06, 7.51E-06, 7.80E-06, 6.01E-06, 6.15E-06, 8.23E-06, 6.44E-06, 4.50E-06, 4.21E-06, 5.29E-06, 5.43E-06, 6.22E-06, 5.86E-06, 6.29E-06, 6.58E-06, 7.65E-06, 5.58E-06, 4.72E-06, 5.79E-06, 6.58E-06, 6.79E-06, 6.36E-06, 5.58E-06, 4.21E-06, 4.72E-06, 5.15E-06, 4.07E-06, 3.93E-06, 1.99E-06, 2.03E-07, 1.92E-06, 4.00E-06, 7.87E-06, 9.09E-06, 7.65E-06, 5.93E-06, 6.29E-06, 6.72E-06, 5.50E-06, 4.64E-06, 4.07E-06, 4.86E-06, 4.29E-06, 3.86E-06, 4.72E-06, 5.72E-06, 2.50E-06, 3.79E-06, 3.93E-06, 5.00E-06, 6.72E-06, 5.93E-06, 6.79E-06, 7.22E-06, 8.23E-06, 9.23E-06, 4.79E-06, 3.50E-06, 1.56E-06, 1.71E-06, 2.35E-06, 3.50E-06, 3.86E-06, 1.71E-06, 1.49E-06, 3.64E-06, 4.93E-06, 6.15E-06, 4.64E-06, 2.50E-06, 1.99E-06, 3.07E-06, 2.50E-06, 1.13E-06, -3.70E-07, 1.28E-06, 3.07E-06, 1.99E-06, 1.71E-06, 1.71E-06, 3.14E-06, 3.14E-06, 1.99E-06, 4.07E-06, 5.72E-06, 5.86E-06, 5.93E-06, 5.00E-06, 4.43E-06, 5.43E-06, 3.79E-06, 4.86E-06, 3.21E-06, 4.36E-06, 3.43E-06, 3.71E-06, 2.64E-06, 3.50E-06, 3.86E-06, 5.07E-06, 5.86E-06, 5.29E-06, 4.29E-06, 4.50E-06, 3.79E-06, 9.19E-07, 9.91E-07, 1.85E-06, 6.33E-07, 1.13E-06, 2.78E-06, 3.71E-06, 1.99E-06, 1.64E-06, 6.33E-07, 3.14E-06, 1.99E-06, 1.92E-06, 4.64E-06, 6.44E-06, 6.01E-06, 4.50E-06, 2.21E-06, 4.86E-06, 6.08E-06, 6.79E-06, 6.94E-06, 5.00E-06, 4.43E-06, 1.85E-06, 4.43E-06, 2.93E-06, 8.48E-07, 4.90E-07, 1.78E-06, 3.43E-06, 3.93E-06, 4.00E-06, 3.28E-06, 2.57E-06, 2.64E-06, 3.57E-06, 3.57E-06, 2.14E-06, 1.42E-06, 1.71E-06, 3.07E-06, 5.43E-06, 3.86E-06, 2.57E-06, 2.57E-06, 3.57E-06, 3.36E-06, 4.43E-06, 5.22E-06, 4.93E-06, 4.79E-06, 4.72E-06, 4.86E-06, 2.14E-06, 1.85E-06, 1.71E-06, 3.50E-06, 4.43E-06, 3.36E-06, 3.71E-06, 5.15E-06, 3.93E-06, 1.06E-06, 2.07E-06, 3.64E-06, 3.86E-06, 1.92E-06, 5.98E-08, 2.35E-06, 2.64E-06, 2.57E-06, 3.43E-06, 2.35E-06, 9.19E-07, 7.05E-07, -1.44E-06, 1.49E-06, 4.07E-06, 6.44E-06, 5.36E-06, 9.91E-07, -1.59E-06, 2.03E-07, 2.35E-06, 1.49E-06, 1.06E-06, 8.48E-07, 1.78E-06, 1.49E-06, 2.07E-06, 1.28E-06, -3.70E-07, -1.59E-06, 3.46E-07, 5.29E-06, 6.44E-06, 3.28E-06, 1.35E-06, 2.42E-06, 2.07E-06, -2.27E-07, -8.00E-07, 2.42E-06, 4.72E-06, 4.43E-06, 4.00E-06, 2.21E-06, 2.78E-06, 1.64E-06, 1.21E-06, 1.42E-06, 1.85E-06, 5.15E-06, 5.72E-06, 4.07E-06, 2.57E-06, 1.78E-06, 4.43E-06, 6.15E-06, 5.86E-06, 5.07E-06, 5.29E-06, 3.14E-06, 1.78E-06, 1.71E-06, 2.21E-06, 1.42E-06, 1.35E-06, 1.35E-06, 2.21E-06, 1.99E-06, 9.19E-07, -6.57E-07, -1.01E-06, -1.73E-06, -2.30E-06, -2.02E-06, -4.42E-07, 1.85E-06, 2.50E-06, 1.21E-06, 6.33E-07, 7.05E-07, 7.05E-07, 1.42E-06, 1.28E-06, 9.91E-07, 8.48E-07, -1.59E-06, -7.28E-07, -1.37E-06, -8.00E-07, -1.30E-06, 2.21E-06, 3.50E-06, 3.64E-06, 3.28E-06, 9.19E-07, 1.56E-06, 1.78E-06, 2.35E-06, 1.31E-07, 1.49E-06, 1.99E-06, 1.85E-06, 1.35E-06, -1.73E-06, -1.59E-06, 1.21E-06, 4.93E-06, 4.72E-06, 4.72E-06, 4.50E-06, 3.57E-06, 2.64E-06, 3.14E-06, 1.99E-06, 3.93E-06, 3.71E-06, -1.44E-06, -2.27E-07, 9.19E-07, 1.42E-06, 2.42E-06, 3.79E-06, 2.57E-06, 3.21E-06, 3.86E-06, 4.50E-06, 3.36E-06, 3.46E-07, -4.42E-07, 5.98E-08, 1.42E-06, 2.28E-06, 3.71E-06, 5.72E-06, 6.87E-06, 4.64E-06, 9.91E-07, 1.49E-06, 1.92E-06, 1.56E-06, 1.06E-06, -8.00E-07, -1.44E-06, -2.98E-07, -8.35E-08, 5.98E-08, -2.27E-07, -8.72E-07, -2.02E-06, -2.95E-06, -8.00E-07, 1.78E-06, 4.50E-06, 3.93E-06, 4.36E-06, 3.00E-06, -9.43E-07, 9.91E-07, 1.13E-06, 6.33E-07, 1.21E-06, 1.64E-06, 2.50E-06, 1.99E-06, -1.59E-06, 3.46E-07, 5.98E-08, -9.43E-07, -4.42E-07, 9.19E-07, 5.61E-07, 1.28E-06, 1.92E-06, 2.21E-06, 1.71E-06, 2.03E-07, 5.61E-07, 1.92E-06, 2.64E-06, 2.21E-06, 2.14E-06, 3.79E-06, 4.21E-06, 5.15E-06, 3.07E-06, 9.91E-07, -7.28E-07, 1.49E-06, 3.79E-06, 4.07E-06, 5.98E-08, -1.52E-06, -1.18E-08, -4.42E-07, 1.21E-06, 1.71E-06, 3.07E-06, 3.21E-06, 1.78E-06, 2.75E-07, 6.33E-07, -8.35E-08, -1.30E-06, -2.23E-06, -1.16E-06, 5.98E-08, 4.90E-07, 1.71E-06, -5.13E-07, -4.42E-07, 1.31E-07, 2.64E-06, 1.92E-06, 1.71E-06, 1.71E-06, 1.92E-06, 3.79E-06, 5.72E-06, 5.22E-06, 2.57E-06, 5.00E-06, 5.65E-06, 5.00E-06, 4.14E-06, 4.07E-06, 2.78E-06, 3.64E-06, 1.78E-06, 1.35E-06, 1.13E-06, -5.85E-07, -4.42E-07, 6.33E-07, -8.00E-07, -6.57E-07, -1.59E-06, 8.48E-07, 7.05E-07]
t_sim = [0, 4.10E-06, 8.21E-06, 4.92E-05, 9.03E-05, 0.000500504, 0.000910727, 0.004723935, 0.00853523, 0.012344596, 0.019016475, 0.025682577, 0.032343062, 0.038998085, 0.053272292, 0.067523208, 0.081751962, 0.109550863, 0.137275857, 0.164933162, 0.192528016, 0.247979681, 0.303225732, 0.358289806, 0.413191373, 0.467946575, 0.547493698, 0.626790952, 0.705864411, 0.784735572, 0.863422366, 0.977869997, 1.091994815, 1.205827169, 1.319392437, 1.432712174, 1.59236949, 1.751617124, 1.910491618, 2.069024653, 2.227244069, 2.448323522, 2.668894692, 2.889008515, 3.108709901, 3.328038624, 3.642843822, 3.957041696, 4.270709351, 4.583912638, 4.896707919, 5.367921463, 5.838450219, 6.308402755, 6.777863486, 7.351213382, 7.924022234, 8.496361675, 9.068287528, 9.639843098, 10.48884776, 11.33718729, 12]
drhodx_sim = [9.21E-05, 9.31E-05, 9.36E-05, 9.42E-05, 9.42E-05, 9.46E-05, 9.50E-05, 9.70E-05, 9.70E-05, 9.61E-05, 9.37E-05, 9.15E-05, 8.95E-05, 8.75E-05, 8.33E-05, 7.95E-05, 7.60E-05, 7.00E-05, 6.48E-05, 6.02E-05, 5.62E-05, 4.96E-05, 4.42E-05, 3.99E-05, 3.63E-05, 3.33E-05, 2.97E-05, 2.68E-05, 2.44E-05, 2.25E-05, 2.08E-05, 1.88E-05, 1.71E-05, 1.58E-05, 1.46E-05, 1.36E-05, 1.24E-05, 1.14E-05, 1.05E-05, 9.69E-06, 8.99E-06, 8.12E-06, 7.35E-06, 6.67E-06, 6.06E-06, 5.51E-06, 4.82E-06, 4.23E-06, 3.73E-06, 3.28E-06, 2.90E-06, 2.45E-06, 2.07E-06, 1.77E-06, 1.53E-06, 1.31E-06, 1.14E-06, 9.97E-07, 9.03E-07, 8.24E-07, 7.36E-07, 6.73E-07, 6.37E-07]
weights

t_exp = np.array(t_exp)
drhodx_exp = np.array(drhodx_exp)
t_sim = np.array(t_sim)
drhodx_sim = np.array(drhodx_sim)
weights = np.array(weights)

for weight in weights:
    if weight != 0:
        weight_max = weight
        break

y1 = drhodx_exp.copy()
            
window_len = int(len(t_exp)*0.05)
if (window_len % 2) == 0: 
    window_len -= 1

# y1 = wiener(y1, mysize=window_len)
# y1 = np.abs(hilbert(y1))

f_interp = interp1d(t_sim.flatten(), drhodx_sim.flatten(), kind='cubic')
t_interp, exp_bounds = calc_t_interp(t_sim, t_exp)
y2 = f_interp(t_interp)
# y2 = np.abs(hilbert(y2))

y1 = median_filter(y1, window_len)


weight_ind = np.argwhere(weights > 0.95*weight_max)
exp_bounds = np.intersect1d(exp_bounds, weight_ind)
t_int = t_exp[exp_bounds].copy() + t_offset

# y1 -= y1[exp_bounds].mean(); y1 /= y1[exp_bounds].std()
# y2 -= y2[exp_bounds].mean(); y2 /= y2[exp_bounds].std()

corr = np.convolve(y1[exp_bounds], y2[::-1], mode='valid')
# delay = x2[np.argmax(corr)]

# t_shift = parabolic(corr, np.argmax(corr))[0] - int(len(corr)/2)
shift = t_exp[corr.argmax()]
print(shift)
# shift = t_shift*np.mean(np.diff(t_int))
# print(shift)

fig = plt.figure()
ax = fig.add_subplot(2, 1, 1)
ax.plot(range(len(corr)), corr)

# fig = plt.figure()
ax = fig.add_subplot(2, 1, 2)
ax.set_yscale('log')

# ax.plot(t_exp, y1, 'go')
ax.plot(t_exp[exp_bounds], y1[exp_bounds], 'o')
# ax.plot(t_sim+t_offset, drhodx_sim)
ax.plot(t_interp, y2)
ax.plot(t_interp + shift, y2)
# ax.plot(t_int+t_shift*(t_int[-1]-t_int[0])/len(t_int), y2[exp_bounds])
ax.legend(("data", "original sim", "shifted"))
plt.show()
        